---
# tasks file for container

########################################################
- block:
  - name: start dokerd if is not already started
    shell: "sudo service docker start"
    register: shell_result
    ignore_errors: yes

  - debug:
      msg: "{{ shell_result }}"
  when: startdocker is defined and startdocker == 1
#######################################################


- name: create ECR repository for container
  ecs_ecr:
    name: "{{ecr_repository_name}}"
    registry_id: "{{aws_account}}"
    region: "{{aws_region}}"
    state: present
  register: ecr_result

- name: show results
  debug:
    msg: "{{ecr_result}}"

- name: capture repository uri
  set_fact:
    ecr_repository_uri: "{{ ecr_result.repository.repositoryUri }}"

- name: show repository uri
  debug:
    msg: "{{ecr_repository_uri}}"


####################
- name: login to the ECR
  shell: $( aws ecr get-login --no-include-email --region={{aws_region}} --registry-ids {{aws_account}})
  register: login_result

- name: ECR login result
  debug:
    msg: "{{login_result}}"

- name: build the image and push it to repository
  docker_image:
    build:
      # path: "{{role_path}}/files/project/"
      path: "{{role_path}}/../../../"
      dockerfile: docker/Dockerfile
      pull: no
    name: "{{ecr_repository_uri}}"
    tag: "{{container_version}}"
    push: yes
    source: build
    state: present
  register: container_result

####################

- name: container image build result
  debug:
    msg: "{{container_result}}"


